/*
 * This source file was generated by the Gradle 'init' task
 */
package taller5;
import java.text.DecimalFormat;
import java.util.Scanner;

public class App {

    public static Scanner teclado = null;

    public static String Verde = "\u001B[32m",
    Rojo = "\u001B[31m",
    Negro = "\u001B[30m",
    Amarillo = "\u001B[33m",
    Azul = "\u001B[34m",
    Purpura = "\u001B[35m",
    CYAN = "\u001B[36m",
    Blanco = "\u001B[37m",
    RESET = "\u001B[0m";
  
    
    public static void main(String[] args) {
        
        try{
              //punto #1
              System.out.println(Adivinanza() + "\n");

              //punto #2
              System.out.println(Simular_ventas() + "\n");

              // espacio para el punto #3
              teclado = new Scanner(System.in);
              System.out.println(CYAN + "Ingrese por favor el número de bombillas" + RESET);
              int bomb = teclado.nextInt();
              
              System.out.println(Calcular_empaque(bomb) + "\n");
              //fin del espacio para el punto #3


              //espacion para el punto #4
             teclado = new Scanner(System.in);
             System.out.println( CYAN + "Ingrese por favo el número de jugadores" + RESET);
             byte players = teclado.nextByte();

             System.out.println(Jugar_21(players));   
             teclado.close();
             //fin del espacion para el punto #4  
             
 
            
        } 
        
        catch (Exception e) {
            System.out.println("Ocurrió un error"+ e.toString());
        }
    }


    /*
    
        1.	Desarrolle un algoritmo e impleméntelo en Java que: le pida al usuario un número entero positivo 
        entre 1000 y 9999. En un ciclo genere números de manera aleatoria y cuente los intentos que hizo antes 
        de hallar el número exactamente.
        
    */
    public static String Adivinanza() {
        try {
            // Declaramos variables y constantes.
            final int limsup = 9999, liminf = 1000, uno = 1, cero = 0; // liminf será el máximo de intentos que el usuario tendrá
            int aleatorio;
            int contador;
            int varit2;
            int numero_usuario;
    
            // entorno para el Scanner
            teclado = new Scanner(System.in);
            System.out.println(CYAN + "Jugaremos adivina el número. El programa generará un número entre 1000 y 9999, tendrás que adivinarlo." + RESET);
    
            for (contador = 1; contador <= limsup; contador++) {
                aleatorio = (int)(Math.random() * (limsup - liminf + uno) + liminf);
    
                if (contador == uno) {
                    System.out.println(Verde + "Vamos, ingresa un número." + RESET);
                    numero_usuario = teclado.nextInt();
                } else {
                    System.out.println(Verde + "Ingresa otro número por favor, si quieres dejar de jugar solo ingresa 0" + RESET);
                    numero_usuario = teclado.nextInt();
                    if (numero_usuario == cero)
                        return Rojo + "has terminado el programa" + RESET;
                }
    
                if (numero_usuario < liminf || numero_usuario > limsup) {
                    System.out.println(Rojo + "Vaya, parece que ingresaste un número no válido, por favor intenta de nuevo. Vamos en el intento #" + contador + RESET);
                } else {
                    for (varit2 = uno; varit2 <= liminf; varit2++) {
                        if (numero_usuario != aleatorio) {
                            System.out.println(Rojo + "Vaya, parece que no has adivinado, vamos en el intento #" + contador + " , intentemos nuevamente." + RESET);
                            break;
                        } else if (numero_usuario == aleatorio) {
                            System.out.println(Verde + "¡Excelente! Has adivinado el número " + aleatorio + " en el intento # " + contador + RESET);
                        }
                    }
                }
    
                if (numero_usuario == aleatorio)
                    break;
            }
            teclado.close();
            return "";
    
        } catch (Exception e) {
            return "Ha ocurrido un error" + e.getMessage();
        }
    }
    
    /* 
     
        2.	Se requiere una función en java que simule las ventas de tres años para un almacén. Para cada año, deberá generar 
        un aleatorio para cada mes hasta completar los 12 meses. La función se llamará Simular_ventas, y debe retornar un String 
        al final que muestre las ventas de cada año, así:
        
            Año 1
            Ventas Mes 1: $##.###.###
            :
            Ventas Mes 12: $##.###.###
            Total ventas Año 1:  $##.###.###
            
            Año 2
            Ventas Mes 1: $##.###.###
            :
            Ventas Mes 12: $##.###.###
            Total ventas Año 2: $##.###.###
            
            Año 3
            Ventas Mes 1: $##.###.###
            :
            Ventas Mes 12: $##.###.###

            Total ventas Año 3: $##.###.###
            
            Investigue sobre la clase DecimalFormat para mostrar bien la salida. 
            import java.text.DecimalFormat;
            DecimalFormat form_pesos = new DecimalFormat("$#,###.00");

    */
    public static String Simular_ventas(){
        try {

            DecimalFormat form_pesos = new DecimalFormat("$#,###.00");
            final int liminf = 10000, limsup = 1000000;
            final byte uno = 1, tres = 3, doce = 12;
            String txt_retorno = "";
            int years, meses;
            double random, total_ventas_anual = 0;

            for(years = uno; years <= tres; years ++){

                for(meses = uno; meses <= doce; meses ++){
                    random = Math.random() * (limsup - liminf + uno)+ liminf;

                    if(meses == uno)
                    txt_retorno += CYAN + "Año "  + years + RESET + "\n" + "Ventas Mes " + meses + ": " + form_pesos.format(random) + "\n"  + ":" + "\n";


                   else if(meses < doce && meses > uno)
                    txt_retorno += "Ventas Mes " + meses + ": " + form_pesos.format(random) + "\n"  + ":" + "\n";

                    else if(meses == doce){ 
                        txt_retorno += "Ventas Mes " + meses + ": " + form_pesos.format(random) + "\n" + "\n" ;
                    }
                    total_ventas_anual += random;
                }

                txt_retorno += "Total ventas Año " + years + ": " + form_pesos.format(total_ventas_anual) + "\n"+ "\n";

            }
            return txt_retorno;

    
        } 
        catch (Exception e) {
            return "Ha ocurrido un error" + e;
        }

    }

    /*  
     
        3.	En una fábrica se tiene el siguiente patrón de empaque: En una estiba(o pallet) caben 16  cajas y en cada caja, 
        caben 30 bombillas. Desarrolle una función que se llame: Calcular_empaque que: reciba como argumento la cantidad de 
        bombillas que se deben empacar y a partir de allí: calcule cuántas cajas necesita, cuántas estibas o pallets necesita. 
        Luego escriba lo siguiente: 

        Para ### bombillas, se necesitan ## cajas y ## pallets. Se quedan ### bombillas sin empacar. Se empacará así:

        Pallet 1 --> Caja1, Caja2……,Caja16
        Pallet2 -->  Caja17, Caja18…..Caja 32
        .
        Pallet n -- > Caja m, caja m+1…..
        
        La función retornará un texto, con la información anterior. Pruebe la función llamándola desde el programa principal: solicite al usuario el número de bombillas e invoque la función para imprimir en el main, los resultados.

    */
    public static String Calcular_empaque(int Bombillas_Totales) {
        try {
            final int CAJAS_POR_PALLET = 16, BOMBILLAS_POR_CAJA = 30, UNO = 1, CERO = 0;
    
            int cajas_totales = Bombillas_Totales / BOMBILLAS_POR_CAJA;
            int bombillas_que_sobran = Bombillas_Totales % BOMBILLAS_POR_CAJA;
    
            if (bombillas_que_sobran > CERO) {
                cajas_totales++;
            }
    
            int pallets_totales = cajas_totales / CAJAS_POR_PALLET;
            int cajasQueSobran = cajas_totales % CAJAS_POR_PALLET;
    
            if (cajasQueSobran > CERO) {
                pallets_totales++;
            }
    
            String txt = "Para " + Bombillas_Totales + " bombillas, se necesitan " + cajas_totales + " cajas y " + pallets_totales
                    + " pallets. Se quedan " + bombillas_que_sobran + " bombillas sin empacar. Se empacará así:\n\n";
    
            String txt_retorno = "";
            int contador_pallets, contador_cajas;
            int numeroDeCaja = 1;
    
            if (Bombillas_Totales <= CERO)
                return Rojo + "Parece que ingresaste un número de bombillas inválido, por favor intenta de nuevo." + RESET;
            else {
    
                for (contador_pallets = UNO; contador_pallets <= pallets_totales; contador_pallets++) {
                    txt_retorno += "Pallet " + contador_pallets + " --> ";
    
                    int limiteCajas = cajas_totales - (contador_pallets - UNO) * CAJAS_POR_PALLET;
                    if (limiteCajas > CAJAS_POR_PALLET) {
                        limiteCajas = CAJAS_POR_PALLET;
                    }
    
                    for (contador_cajas = UNO; contador_cajas <= limiteCajas; contador_cajas++) {
                        txt_retorno += "Caja " + numeroDeCaja;
    
                        if (contador_cajas < limiteCajas) {
                            txt_retorno += ", ";
                        }
                        numeroDeCaja++;
                    }
                    txt_retorno += "\n";
                }
    
                return txt + txt_retorno;
            }
        } catch (Exception e) {
            return "Ha ocurrido un error: " + e.toString();
        }
    }
    
    
    /* 

        4.	En un juego, cada jugador tiene 3 intentos para sacar cartas de una baraja. Las cartas van numeradas entre 1 y 10. 
        Una función Jugar_21, deberá simular el juego para una cantidad de usuarios que enviará el usuario desde el main entre 1 y 6.

        Para cada uno de los jugadores, el programa le calculará 3 cartas al azar y al final imprimirá el juego para cada jugador basado en las siguientes reglas: 
        
        Si saca 21 exactos: juego perfecto
        Si saca más de 21: se pasó
        Si saca menos de 21: faltaron puntos

        La función deberá imprimir los puntos de cada jugador junto con la regla anterior, como muestra el ejemplo:

        Jugador X, puntos 21 -- > juego perfecto
        Jugador Y, puntos 26 -- > se pasó
        .
        .


    */
    public static String Jugar_21(byte cantidad_de_jugadores) {
        try {
            // declaración de variables y constantes.
            final int uno = 1, diez = 10, seis = 6, cero = 0, veintiuno = 21;
            int jugador, calculadora_de_cartas;
            int carta1, carta2, carta3, puntos_totales = 0;
            String resumen_del_juego = "";
    
            if (cantidad_de_jugadores < uno || cantidad_de_jugadores > seis)
                return "Has ingresado una cantidad de jugadores inválida, por favor intente de nuevo";
            else {
                for (jugador = uno; jugador <= cantidad_de_jugadores; jugador++) {
                    for (calculadora_de_cartas = cero; calculadora_de_cartas <= uno; calculadora_de_cartas++) {
                        // calculamos nuestras cartas aleatoriamente para cada jugador
                        carta1 = (int) (Math.random() * (diez) + uno);
                        carta2 = (int) (Math.random() * (diez) + uno);
                        carta3 = (int) (Math.random() * (diez) + uno);
                        // calculamos los puntos que obtendrá cada jugador
                        puntos_totales = carta1 + carta2 + carta3;
                    }
    
                    if (puntos_totales == veintiuno)
                        resumen_del_juego += "Jugador " + jugador + ", puntos " + puntos_totales + " -- > juego perfecto";
                    else if (puntos_totales > veintiuno)
                        resumen_del_juego += "Jugador " + jugador + ", puntos " + puntos_totales + " -- > se pasó";
                    else {
                        resumen_del_juego += "Jugador " + jugador + ", puntos " + puntos_totales + " -- > faltaron puntos";
                    }
    
                    resumen_del_juego += "\n";
                }
    
                return resumen_del_juego;
            }
    
        } catch (Exception e) {
            return Rojo + "Ha ocurrido un error" + e.toString() + RESET;
        }
    }
    

}

